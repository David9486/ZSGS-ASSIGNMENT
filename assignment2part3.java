import java.util.Scanner;
import java.util.*;
/*1. Given two binary strings a and b, return their sum as a binary string.
Input: a = "11", b = "1"
Output: "100"
‌
Input: a = "1010", b = "1011"
Output: "10101"
‌
Constraints:
1 <= a.length, b.length <= 10^4
a and b consist only of '0' or '1' characters.
Each string does not contain leading zeros except for the zero itself.*/

class BinaryString{
	public static void main(String[] args){
		Scanner sc=new Scanner(System.in);
		System.out.println("enter the first binary string: ");
		String a=sc.nextLine();
		System.out.println("enter the second binary string: ");
		String b=sc.nextLine();
		int i=a.length()-1;
		int j=b.length()-1;
		String result="";
		int remainder=0;
		int value1=0,value2=0;
		while(i>=0||j>=0){
			if(i>=0){
				value1=a.charAt(i)-'0';
				i--;
			}
			if(j>=0){
				value2=b.charAt(j)-'0';
				j--;
			}
			result=((remainder+value1+value2)==1?1:0)+result;
			remainder=(remainder+value1+value2)>1?1:0;
		}
		System.out.println("the sum of two binary string "+a+" and "+b+" is "+result);
	}
}

//2.2. Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet.
/*For example:
A -> 1
B -> 2
C -> 3
...
Z -> 26
AA -> 27
AB -> 28
...
‌
Example 1:
Input: columnNumber = 1
Output: "A"
‌
Example 2:
Input: columnNumber = 28
Output: "AB"
‌
Example 3:
Input: columnNumber = 701
Output: "ZY"
‌
Constraints:
1 <= columnNumber <= 2^31 - 1*/
class TitleColumn{
	public static void main(String[] args){
		Scanner sc=new Scanner(System.in);
		System.out.println("enter the character to check: ");
		int columnNumber=sc.nextInt();
		int temp=columnNumber;
		String res="";
		while(temp>0){
			temp--;
			int rem=temp%26;
			char a=(char) ('A'+rem);
			res=a+res;
			temp=temp/26;
		}
		System.out.println("for the column number "+columnNumber+" the corresponding column number is: "+res);
	}
}
// 3.Given a string s, reverse only all the vowels in the string and return it.
/*The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both lower and upper cases, more than once.
‌
Example 1:
Input: s = "hello"
Output: "holle"
‌
Example 2:
Input: s = "leetcode"
Output: "leotcede"
‌
Constraints:
1 <= s.length <= 3 * 10^5
s consist of printable ASCII characters.*/
class Vowels{
	static boolean vowel(char a){
		return a=='a'||a=='e'||a=='i'||a=='o'||a=='u';
	}
	public static void main(String[] args){
		Scanner sc=new Scanner(System.in);
		System.out.println("enter the string: ");
		String s=sc.nextLine();
		String sl=s.toLowerCase();
		char[] arr=sl.toCharArray();
		int i=0;
		int j=arr.length-1;
		while(i<j){
			if(!vowel(arr[i])){
				i++;
			}
			else if(!vowel(arr[j])){
				j--;
			}
			else{
				char temp=arr[i];
				arr[i]=arr[j];
				arr[j]=temp;
				i++;
				j--;
			}
		}
		System.out.println("the reverse of  vowels in the string is: "+new String(arr));
	}
}
//4.you are given two strings s and t.
/*String t is generated by random shuffling string s and then add one more letter at a random position.
‌
Return the letter that was added to t.
‌
Example 1:
Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.
‌
Example 2:
Input: s = "", t = "y"
Output: "y"
‌
Constraints:
0 <= s.length <= 1000
t.length == s.length + 1
s and t consist of lowercase English letters.*/
class ShufflingLetter{
	public static void main(String[] args){
		Scanner sc=new Scanner(System.in);
		System.out.println("enter the string 1: ");
		String s=sc.nextLine();
		System.out.println("enter the string 2: ");
		String n=sc.nextLine();
		String res="";
		int sum1=0,sum2=0;
		for(char ch:s.toCharArray()){
			sum1+=ch;
		}
		for(char ch:n.toCharArray()){
			sum2+=ch;
		}
		char result=(char) (sum2-sum1);
		System.out.println("the letter that was added at random position is: "+result);
		
	}
}
/*Given two strings s and t, return true if s is a subsequence of t, or false otherwise.
‌
A subsequence of a string is a new string that is formed from the original string by deleting some 
(can be none) of the characters without disturbing the relative positions of the remaining characters. 
(i.e., "ace" is a subsequence of "abcde" while "aec" is not).
‌
Example 1:
Input: s = "abc", t = "ahbgdc"
Output: true
‌
Example 2:
Input: s = "axc", t = "ahbgdc"
Output: false
‌
Constraints:
0 <= s.length <= 100
0 <= t.length <= 10^4
s and t consist only of lowercase English letters.
‌
Follow up: Suppose there are lots of incoming s, say s1, s2, ..., sk where k >= 10^9, and you want to check one by one to see if t has its subsequence. 
In this scenario, how would you change your code?*/

class Subsequence{
	public static void main(String[] args){
		boolean flag=false;
		Scanner sc=new Scanner(System.in);
		System.out.println("enter the first string:");
		String s=sc.nextLine();
		System.out.println("enter the second string:");
		String t=sc.nextLine();
		int count=0;
		for(int i=0;i<s.length();i++){
			for(int j=0;j<t.length();j++){
				if(s.charAt(i)==t.charAt(j)){
					count++;
					break;
				}
			}
		}
		if(count==s.length()){
			flag=true;
		}
		System.out.print(flag);
	}
}
//6.Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.
/*You must solve the problem without using any built-in library for handling large integers (such as BigInteger).
 You must also not convert the inputs to integers directly.
‌
Example 1:
Input: num1 = "11", num2 = "123"
Output: "134"
‌
Example 2:
Input: num1 = "456", num2 = "77"
Output: "533"
‌
Example 3:
Input: num1 = "0", num2 = "0"
Output: "0"
‌
Constraints:
1 <= num1.length, num2.length <= 10^4
num1 and num2 consist of only digits.
num1 and num2 don't have any leading zeros except for the zero itself.*/
class StrSum{
	public static void main(String[] args){
		Scanner sc=new Scanner(System.in);
		System.out.println("enter the first string:");
		String num1=sc.nextLine();
		int i=num1.length()-1;
		System.out.println("enter the second string:");
		String num2=sc.nextLine();
		int j=num2.length()-1;
		String result="";
		int rem=0;
		while(i>=0||j>=0){
			int digits1=i>=0?num1.charAt(i)-'0':0;
			int digits2=j>=0?num2.charAt(j)-'0':0;
			int sum=digits1+digits2+rem;
			rem=sum/10;
			result=sum%10+result;
			i--;
			j--;
		}
		System.out.println("the two strings after the sum is: "+result);
	}
}
//7. Given a string s, return the number of segments in the string.
/*A segment is defined to be a contiguous sequence of non-space characters.
‌
Example 1:
Input: s = "Hello, my name is John"
Output: 5
Explanation: The five segments are ["Hello,", "my", "name", "is", "John"]
‌
Example 2:
Input: s = "Hello"
Output: 1
‌
Constraints:
0 <= s.length <= 300
s consists of lowercase and uppercase English letters, digits, or one of the following characters "!@#$%^&*()_+-=',.:"
The only space character in s is ' '.*/
class NumberSegment{
	public static void main(String[] args){
		Scanner sc=new Scanner(System.in);
		System.out.println("enter the first string:");
		String s=sc.nextLine();
		String[] res=s.trim().split("\\s+");
		int count=res.length;
		System.out.println(count);
	}
}
//8. We define the usage of capitals in a word to be right when one of the following cases holds:
/*1. All letters in this word are capitals, like "USA".
2. All letters in this word are not capitals, like "leetcode".
3. Only the first letter in this word is capital, like "Google".
Given a string word, return true if the usage of capitals in it is right.
Example 1:
Input: word = "USA"
Output: true
‌
Example 2:
Input: word = "FlaG"
Output: false
‌
Constraints:
1 <= word.length <= 100
word consists of lowercase and uppercase English letters.*/
class CapitalLetter{
	public static void main(String... args){
		Scanner sc=new Scanner(System.in);
		System.out.println("enter the first string:");
		String s=sc.nextLine();
		String test=s.trim();
		boolean flag=false;
		char n=' ';
		for(int i=0;i<test.length();i++){
			n=test.charAt(i);
			if(Character.isUpperCase(n)){
				flag=true;
			}
		}
		char check=test.charAt(0);
		System.out.println(Character.isUpperCase(check));
	}
}
		